[project]
name = "mcp-pytest-tools"
version = "0.1.0"
description = "MCP server providing pytest tools for AI assistants"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [{name = "IndigiGenius", email = "shawn@firstlanguages.ai"}]
keywords = ["mcp", "pytest", "testing", "ai", "assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "mcp>=0.1.0",
    "pytest>=7.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "UP", "B", "Q"]
ignore = ["E501"]  # Line too long - let formatter handle

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "asyncio: marks tests as async",
]
addopts = "--strict-markers"

[tool.coverage.run]
source = ["mcp_pytest_tools"]
omit = ["tests/*", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[dependency-groups]
dev = [
    "mypy>=1.17.0",
    "pytest-asyncio>=1.1.0",
    "ruff>=0.12.5",
]
